From 87166776369b5641402d0ec83066358ece52dd46 Mon Sep 17 00:00:00 2001
From: Himadri Bhattacharjee <lavafroth@protonmail.com>
Date: Sun, 20 Aug 2023 17:59:12 +0530
Subject: [PATCH] fix: prevent set_gtk3_theme from crashing when using
 GSettingsSetting by adding getter and setter

---
 gradience/backend/theming/preset.py  |   6 +-
 gradience/backend/utils/gsettings.py | 190 ++++++++++++++-------------
 2 files changed, 102 insertions(+), 94 deletions(-)

diff --git a/gradience/backend/theming/preset.py b/gradience/backend/theming/preset.py
index 95f5d527..c7971416 100644
--- a/gradience/backend/theming/preset.py
+++ b/gradience/backend/theming/preset.py
@@ -26,8 +26,8 @@
 from gradience.backend.models.preset import Preset
 
 from gradience.backend.utils.theming import generate_gtk_css
-from gradience.backend.globals import user_config_dir, presets_dir, get_gtk_theme_dir, is_sandboxed
-from gradience.backend.utils.gsettings import GSettingsSetting, FlatpakGSettings, GSettingsMissingError
+from gradience.backend.globals import presets_dir, get_gtk_theme_dir, is_sandboxed
+from gradience.backend.utils.gsettings import GSettingsSetting, FlatpakGSettings
 
 from gradience.backend.logger import Logger
 
@@ -42,7 +42,7 @@ def __init__(self):
 
     def set_gtk3_theme(self):
         settings_retriever = FlatpakGSettings if is_sandboxed() else GSettingsSetting
-        self.settings = settings_retriever(self.THEME_GSETTINGS_SCHEMA_ID, schema_dir=None)
+        self.settings = settings_retriever(self.THEME_GSETTINGS_SCHEMA_ID)
         self.settings.set("gtk-theme", "adw-gtk3")
 
     def get_presets_list(self, repo=None, full_list=False) -> dict:
diff --git a/gradience/backend/utils/gsettings.py b/gradience/backend/utils/gsettings.py
index 744f5c4b..eee0f396 100644
--- a/gradience/backend/utils/gsettings.py
+++ b/gradience/backend/utils/gsettings.py
@@ -21,14 +21,12 @@
 # This code is from the GNOME Tweaks application, which is licensed under the GPL-3.0 license.
 # https://gitlab.gnome.org/GNOME/gnome-tweaks/-/blob/master/gtweak/gsettings.py
 
-import os
-import re
-import shutil
-import os.path
 import xml.dom.minidom
 import gettext
 
+from os import path
 from subprocess import SubprocessError, CompletedProcess
+from typing import List
 
 from gi.repository import Gio, GLib
 
@@ -56,76 +54,91 @@ def __init__(self, schema_name, schema_dir=None, schema_filename=None, **options
         if not schema_dir:
             schema_dir = app_id
             for xdg_dir in GLib.get_system_data_dirs():
-                dir = os.path.join(xdg_dir, "glib-2.0", "schemas")
-                if os.path.exists(os.path.join(dir, schema_filename)):
+                dir = path.join(xdg_dir, "glib-2.0", "schemas")
+                if path.exists(path.join(dir, schema_filename)):
                     schema_dir = dir
                     break
 
-        schema_path = os.path.join(schema_dir, schema_filename)
-        if not os.path.exists(schema_path):
+        schema_path = path.join(schema_dir, schema_filename)
+        if not path.exists(schema_path):
             logging.critical("Could not find schema %s" % schema_path)
-            assert (False)
+            assert False
 
         self._schema_name = schema_name
         self._schema = {}
 
         try:
             dom = xml.dom.minidom.parse(schema_path)
-            global_gettext_domain = dom.documentElement.getAttribute(
-                'gettext-domain')
+            global_gettext_domain = dom.documentElement.getAttribute("gettext-domain")
             try:
                 if global_gettext_domain:
                     # We can't know where the schema owner was installed, let's assume it's
                     # the same prefix as ours
                     global_translation = gettext.translation(
-                        global_gettext_domain, localedir)
+                        global_gettext_domain, localedir
+                    )
                 else:
                     global_translation = gettext.NullTranslations()
             except IOError:
                 global_translation = None
-                logging.debug("No translated schema for %s (domain: %s)" % (
-                    schema_name, global_gettext_domain))
+                logging.debug(
+                    "No translated schema for %s (domain: %s)"
+                    % (schema_name, global_gettext_domain)
+                )
             for schema in dom.getElementsByTagName("schema"):
-                gettext_domain = schema.getAttribute('gettext-domain')
+                gettext_domain = schema.getAttribute("gettext-domain")
                 try:
                     if gettext_domain:
-                        translation = gettext.translation(
-                            gettext_domain, localedir)
+                        translation = gettext.translation(gettext_domain, localedir)
                     else:
                         translation = global_translation
                 except IOError:
                     translation = None
-                    logging.debug("Schema not translated %s (domain: %s)" % (
-                        schema_name, gettext_domain))
+                    logging.debug(
+                        "Schema not translated %s (domain: %s)"
+                        % (schema_name, gettext_domain)
+                    )
                 if schema_name == schema.getAttribute("id"):
                     for key in schema.getElementsByTagName("key"):
                         name = key.getAttribute("name")
                         # summary is 'compulsory', description is optional
                         # â€¦in theory, but we should not barf on bad schemas ever
                         try:
-                            summary = key.getElementsByTagName(
-                                "summary")[0].childNodes[0].data
-                        except:
+                            summary = (
+                                key.getElementsByTagName("summary")[0]
+                                .childNodes[0]
+                                .data
+                            )
+                        except Exception:
                             summary = ""
-                            logging.info("Schema missing summary %s (key %s)" %
-                                         (os.path.basename(schema_path), name))
+                            logging.info(
+                                "Schema missing summary %s (key %s)"
+                                % (path.basename(schema_path), name)
+                            )
                         try:
-                            description = key.getElementsByTagName(
-                                "description")[0].childNodes[0].data
+                            description = (
+                                key.getElementsByTagName("description")[0]
+                                .childNodes[0]
+                                .data
+                            )
                         except:
                             description = ""
 
                         # if missing translations, use the untranslated values
                         self._schema[name] = dict(
-                            summary=translation.gettext(
-                                summary) if translation else summary,
-                            description=translation.gettext(
-                                description) if translation else description
+                            summary=translation.gettext(summary)
+                            if translation
+                            else summary,
+                            description=translation.gettext(description)
+                            if translation
+                            else description,
                         )
 
         except:
-            logging.critical("Error parsing schema %s (%s)" %
-                             (schema_name, schema_path), exc_info=True)
+            logging.critical(
+                "Error parsing schema %s (%s)" % (schema_name, schema_path),
+                exc_info=True,
+            )
 
     def __repr__(self):
         return "<gradience._GSettingsSchema: %s>" % self._schema_name
@@ -133,24 +146,25 @@ def __repr__(self):
 
 class GSettingsSetting(Gio.Settings):
     def __init__(self, schema_name, schema_dir=None, schema_path=None, **options):
-
         if schema_dir is None:
             if schema_path is None and schema_name not in _GSETTINGS_SCHEMAS:
                 raise GSettingsMissingError(schema_name)
 
-            if schema_path is not None and schema_name not in _GSETTINGS_RELOCATABLE_SCHEMAS:
+            if (
+                schema_path is not None
+                and schema_name not in _GSETTINGS_RELOCATABLE_SCHEMAS
+            ):
                 raise GSettingsMissingError(schema_name)
 
             if schema_path is None:
-                Gio.Settings.__init__(self, schema=schema_name)
+                Gio.Settings(self, schema=schema_name)
             else:
-                Gio.Settings.__init__(
-                    self, schema=schema_name, path=schema_path)
+                Gio.Settings(self, schema=schema_name, path=schema_path)
         else:
             GioSSS = Gio.SettingsSchemaSource
-            schema_source = GioSSS.new_from_directory(schema_dir,
-                                                      GioSSS.get_default(),
-                                                      False)
+            schema_source = GioSSS.new_from_directory(
+                schema_dir, GioSSS.get_default(), False
+            )
             schema_obj = schema_source.lookup(schema_name, True)
             if not schema_obj:
                 raise GSettingsMissingError(schema_name)
@@ -159,14 +173,17 @@ def __init__(self, schema_name, schema_dir=None, schema_path=None, **options):
 
         if schema_name not in _SCHEMA_CACHE:
             _SCHEMA_CACHE[schema_name] = _GSettingsSchema(
-                schema_name, schema_dir=schema_dir, **options)
+                schema_name, schema_dir=schema_dir, **options
+            )
             logging.debug("Caching gsettings: %s" % _SCHEMA_CACHE[schema_name])
 
         self._schema = _SCHEMA_CACHE[schema_name]
+        self.schema_dir = schema_dir
 
     def _on_changed(self, settings, key_name):
-        logging.debug("Change: %s %s -> %s" %
-              (self.props.schema, key_name, self[key_name]))
+        logging.debug(
+            "Change: %s %s -> %s" % (self.props.schema, key_name, self[key_name])
+        )
 
     def _setting_check_is_list(self, key):
         variant = Gio.Settings.get_value(self, key)
@@ -182,7 +199,7 @@ def schema_get_all(self, key):
         return self._schema._schema[key]
 
     def setting_add_to_list(self, key, value):
-        """ helper function, ensures value is present in the GSettingsList at key """
+        """helper function, ensures value is present in the GSettingsList at key"""
         assert self._setting_check_is_list(key)
 
         vals = self[key]
@@ -192,7 +209,7 @@ def setting_add_to_list(self, key, value):
             return True
 
     def setting_remove_from_list(self, key, value):
-        """ helper function, removes value in the GSettingsList at key (if present)"""
+        """helper function, removes value in the GSettingsList at key (if present)"""
         assert self._setting_check_is_list(key)
 
         vals = self[key]
@@ -208,66 +225,57 @@ def setting_is_in_list(self, key, value):
         assert self._setting_check_is_list(key)
         return value in self[key]
 
+    def stage(self, action: str, *args) -> List[str]:
+        cmd = ["gsettings"]
+        if self.schema_dir:
+            cmd.extend(("--schemadir", self.schema_dir))
 
-class FlatpakGSettings:
-    def __init__(self, schema_name, schema_dir=None, **options):
-        self.schema_name = schema_name
-        self.schema_dir = schema_dir
+        cmd.extend((action, self._schema._schema_name))
+        cmd.extend(args)
+        return cmd
 
-    def list_keys(self) -> str:
-        dconf_cmd = ["gsettings", "list-keys", self.schema_name]
+    def get(self, key: str) -> CompletedProcess:
         process = GradienceSubprocess()
+        completed = process.run(self.stage("get", key), allow_escaping=True)
+        return process.get_stdout_data(completed, decode=True)
 
-        if self.schema_dir:
-            self._insert_schemadir(dconf_cmd)
-
-        try:
-            completed = process.run(dconf_cmd, allow_escaping=True)
-            stdout = process.get_stdout_data(completed, decode=True)
-        except SubprocessError:
-            raise
-        else:
-            return stdout
+    def set(self, key: str, value: str) -> None:
+        process = GradienceSubprocess()
+        process.run(self.stage("set", key, value), allow_escaping=True)
 
-    def get(self, key:str) -> CompletedProcess:
-        dconf_cmd = ["gsettings", "get", self.schema_name, key]
+    def reset(self, key: str = None) -> None:
         process = GradienceSubprocess()
+        process.run(self.stage("reset", key), allow_escaping=True)
 
-        if self.schema_dir:
-            self._insert_schemadir(dconf_cmd)
 
-        try:
-            completed = process.run(dconf_cmd, allow_escaping=True)
-            stdout = process.get_stdout_data(completed, decode=True)
-        except SubprocessError:
-            raise
-        else:
-            return stdout
+class FlatpakGSettings:
+    def __init__(self, schema_name, schema_dir=None, **options):
+        self.schema_name = schema_name
+        self.schema_dir = schema_dir
 
-    def set(self, key:str, value:str) -> None:
-        dconf_cmd = ["gsettings", "set", self.schema_name, key, value]
+    def list_keys(self) -> str:
         process = GradienceSubprocess()
+        completed = process.run(self.stage("list-keys"), allow_escaping=True)
+        return process.get_stdout_data(completed, decode=True)
 
+    def stage(self, action: str, *args) -> List[str]:
+        cmd = ["gsettings"]
         if self.schema_dir:
-            self._insert_schemadir(dconf_cmd)
+            cmd.extend(("--schemadir", self.schema_dir))
 
-        try:
-            process.run(dconf_cmd, allow_escaping=True)
-        except SubprocessError:
-            raise
+        cmd.extend((action, self.schema_name))
+        cmd.extend(args)
+        return cmd
 
-    def reset(self, key:str = None) -> None:
-        dconf_cmd = ["gsettings", "reset", self.schema_name, key]
+    def get(self, key: str) -> CompletedProcess:
         process = GradienceSubprocess()
+        completed = process.run(self.stage("get", key), allow_escaping=True)
+        return process.get_stdout_data(completed, decode=True)
 
-        if self.schema_dir:
-            self._insert_schemadir(dconf_cmd)
-
-        try:
-            process.run(dconf_cmd, allow_escaping=True)
-        except SubprocessError:
-            raise
+    def set(self, key: str, value: str) -> None:
+        process = GradienceSubprocess()
+        process.run(self.stage("set", key, value), allow_escaping=True)
 
-    def _insert_schemadir(self, dconf_cmd):
-        dconf_cmd.insert(1, "--schemadir")
-        dconf_cmd.insert(2, self.schema_dir)
+    def reset(self, key: str = None) -> None:
+        process = GradienceSubprocess()
+        process.run(self.stage("reset", key), allow_escaping=True)
