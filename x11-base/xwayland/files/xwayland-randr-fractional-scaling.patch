From 7fe070112abd4a8e14966e47a67a9162b55b0e7a Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@posteo.de>
Date: Thu, 27 Jan 2022 19:36:39 +0100
Subject: [PATCH] Draft: Add native mode to Xrandr emulation for (fractional)
 scaling

It would be great if Xwayland clients could render at the native
resultion, at least in fullscreen, when (fractional) scaling is
used in the Wayland compositor.
We can archive that by using the existing Xrandr mode emulation,
based on `wp_viewporter`, in a reversed way. As the scaling happens
on the compositor level (possibly even in hardware planes), we
only have to ensure a 1-1 mapping of the backing buffer with the
native screen resolution, while the viewport destination size
matches the logical resolution.

It discovers the native resolution using `wl_output` and
allows me to run games such as Xonotic to be sharply rendered in
native resolution (tested with 1920x1080) in a Gnome session
with 125% scaling. The correct values are also detected on KDE
and Sway.
---
 hw/xwayland/xwayland-output.c | 12 +++++++++++-
 hw/xwayland/xwayland-output.h |  2 +-
 randr/rrcrtc.c                |  4 ++--
 3 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/hw/xwayland/xwayland-output.c b/hw/xwayland/xwayland-output.c
index d2fa4e0bb2..54966cd764 100644
--- a/hw/xwayland/xwayland-output.c
+++ b/hw/xwayland/xwayland-output.c
@@ -115,6 +115,8 @@ output_handle_mode(void *data, struct wl_output *wl_output, uint32_t flags,
         xwl_output->width = width;
         xwl_output->height = height;
     }
+    xwl_output->physical_width = width;
+    xwl_output->physical_height = height;
     xwl_output->refresh = refresh;
 }
 
@@ -339,7 +341,7 @@ output_get_rr_modes(struct xwl_output *xwl_output,
     RRModePtr *rr_modes;
     int i;
 
-    rr_modes = xallocarray(ARRAY_SIZE(xwl_output_fake_modes) + 1, sizeof(RRModePtr));
+    rr_modes = xallocarray(ARRAY_SIZE(xwl_output_fake_modes) + 2, sizeof(RRModePtr));
     if (!rr_modes)
         goto err;
 
@@ -374,6 +376,14 @@ output_get_rr_modes(struct xwl_output *xwl_output,
         (*count)++;
     }
 
+    rr_modes[*count] = xwayland_cvt(xwl_output->physical_width,
+                                    xwl_output->physical_height,
+                                    xwl_output->refresh / 1000.0, 0, 0);
+    if (!rr_modes[*count])
+      goto err;
+
+    (*count)++;
+
     return rr_modes;
 err:
     FatalError("Failed to allocate memory for list of RR modes");
diff --git a/hw/xwayland/xwayland-output.h b/hw/xwayland/xwayland-output.h
index 74a46994fe..31afeb3a78 100644
--- a/hw/xwayland/xwayland-output.h
+++ b/hw/xwayland/xwayland-output.h
@@ -53,7 +53,7 @@ struct xwl_output {
     struct wl_output *output;
     struct zxdg_output_v1 *xdg_output;
     uint32_t server_output_id;
-    int32_t x, y, width, height, refresh;
+    int32_t x, y, width, height, physical_width, physical_height, refresh;
     Rotation rotation;
     Bool wl_output_done;
     Bool xdg_output_done;
diff --git a/randr/rrcrtc.c b/randr/rrcrtc.c
index 3a9b620ab3..0dacb2e23f 100644
--- a/randr/rrcrtc.c
+++ b/randr/rrcrtc.c
@@ -1441,13 +1441,13 @@ ProcRRSetCrtcConfig(ClientPtr client)
 
             RRModeGetScanoutSize(mode, &transform, &source_width,
                                  &source_height);
-            if (stuff->x + source_width > width) {
+            if (FALSE && stuff->x + source_width > width) {
                 client->errorValue = stuff->x;
                 free(outputs);
                 return BadValue;
             }
 
-            if (stuff->y + source_height > height) {
+            if (FALSE && stuff->y + source_height > height) {
                 client->errorValue = stuff->y;
                 free(outputs);
                 return BadValue;
-- 
GitLab

